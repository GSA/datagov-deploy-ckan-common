---
#- name: check if psql ckan role exists
#  command: sudo -u postgres psql -c "SELECT 1 FROM pg_roles WHERE rolname='{{ inventory_db_user }}';"
#  register: check_ckan_db_user
#
#- name: create ckan role
#  when: check_ckan_db_user.stdout.find("(0 rows)") != -1
#  command: sudo -u postgres psql -c "CREATE USER {{ inventory_db_user }} WITH PASSWORD '{{ inventory_db_pass }}' SUPERUSER;"

- name: create inventory role if missing
  postgresql_user:
    name: "{{ inventory_db_user }}"
    password: "{{ inventory_db_pass }}"
    role_attr_flags: SUPERUSER

#- name: create datastore role
#  when: check_ckan_db_user.stdout.find("(0 rows)") != -1
#  command: sudo -u postgres psql -c "CREATE USER {{ inventory_datastore_user }} WITH PASSWORD '{{ inventory_datastore_pass }}';"

- name: create datastore role if missing
  postgresql_user:
    name: "{{ inventory_datastore_user }}"
    password: "{{ inventory_datastore_pass }}"

#- name: create datastore ro  role
#  when: check_ckan_db_user.stdout.find("(0 rows)") != -1
#  command: sudo -u postgres psql -c "CREATE USER {{ inventory_datastore_ro_user }} WITH PASSWORD '{{ inventory_datastore_ro_pass }}';"

- name: create datastore ro role if missing
  postgresql_user:
    name: "{{ inventory_datastore_ro_user }}"
    password: "{{ inventory_datastore_ro_pass }}"

#- name: check if ckan database already exists
#  command: sudo -u postgres psql -c "SELECT 1 FROM pg_database WHERE datname = '{{ inventory_db_name }}';"
#  register: check_ckan_database

#- name: create ckan database
#  when: check_ckan_database.stdout.find("(0 rows)") != -1
#  command: sudo -u postgres psql -c "CREATE DATABASE {{ inventory_db_name }} OWNER {{ inventory_db_user }};"

- name: create ckan database if missing
  postgresql_db:
    name: "{{ inventory_db_name }}"
    owner: "{{ inventory_db_user }}"

#- name: create datastore database
#  when: check_ckan_database.stdout.find("(0 rows)") != -1
#  command: sudo -u postgres psql -c "CREATE DATABASE {{ inventory_datastore_db_name }} OWNER {{ inventory_datastore_user }};"

- name: create datastore database if missing
  postgresql_db:
    name: "{{ inventory_datastore_db_name }}"
    owner: "{{ inventory_datastore_user }}"

- name: install postgis script
  command: "sudo -u postgres psql -d {{ inventory_db_name }} -f /usr/share/postgresql/9.3/contrib/postgis-2.1/postgis.sql"
  tags: skip_ansible_lint

- name: install postgis script
  command: "sudo -u postgres psql -d {{ inventory_db_name }} -f /usr/share/postgresql/9.3/contrib/postgis-2.1/spatial_ref_sys.sql"
  tags: skip_ansible_lint

- name: install postgis script
  command: "sudo -u postgres psql -d {{ inventory_db_name }} -f /usr/share/postgresql/9.3/contrib/postgis-2.1/rtpostgis.sql"
  tags: skip_ansible_lint

- name: install postgis script
  command: "sudo -u postgres psql -d {{ inventory_db_name }} -f /usr/share/postgresql/9.3/contrib/postgis-2.1/topology.sql"
  tags: skip_ansible_lint

#- name: install postgis script
#  command: sudo -u postgres psql -d {{ inventory_db_name }} -c "GRANT SELECT, UPDATE, INSERT, DELETE ON spatial_ref_sys TO {{ inventory_db_user }};"

- name: install postgis script
  postgresql_privs:
    login_user: psql
    database: spatial_ref_sys
    privs: SELECT,UPDATE,INSERT,DELETE
    roles: "{{ inventory_db_user }}"

- name: copy up datastore permissions
  template: src=templates/{{item}}.j2 dest=/{{item}}
  with_items:
    - tmp/set_permissions.sql

- name: set up datastore permissions
  command: sudo -u postgres psql -d {{ inventory_db_name }} -f /tmp/set_permissions.sql
  tags:
  - skip_ansible_lint
